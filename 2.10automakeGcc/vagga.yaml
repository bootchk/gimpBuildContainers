# Vagga script to build Gimp using automake and gcc

# !!! Builds 2.10.  Differences from 2.99 are marked by # <<<2.10

containers:

  # basic OS with dev (compiling)
  baseOS:
    setup:
    - !Ubuntu kinetic

    # tools for dev (C compiler)
    - !Install [build-essential]
    - !Install [gdb]




  # with required build tools
  # Some tools are for optional build: meson, clang
  baseWithTools:
    setup:
    - !Container baseOS

    # Enable universe repo, where many packages live
    - !UbuntuUniverse

    # GIMP build needs setuptools
    - !Install [python3-setuptools]

    # meson is a python3 app
    # Install packaged version, which might be too old.
    # Alternatively, get latest using pip
    # build gegl requires meson
    - !Install [meson]

    # meson and autotools use pkg-config
    - !Install [pkg-config]

    # meson.build calls git
    - !Install [git]

    # meson will use cmake if available?
    - !Install [cmake]

    # build uses gobject introspection tools
    - !Install [gobject-introspection]

    # more tools
    - !Install [ xsltproc]

    # tool to build API docs
    - !Install [gtk-doc-tools]

    # specific to autotools build
    - !Install [libtool]

    # in8n internationalization
    - !Install [intltool]

    # New required tool for Gimp gettext stuff, June 2022
    - !Install [ autopoint ]

    # Packaged valgrind is 3.18, need later for clang14
    - !Install [ valgrind ]

    # Install libc w debug for valgrind
    # - !Install [libc6-dbg]



  # with libraries required by gegl, babl, gimp (and other things we build)

  # these are package names, might depend on distribution
  # e.g. package names are different in alpine

  gimpDeps:
    setup:
    - !Container baseWithTools

    # babl, gegl, GIMP uses glib group of libraries
    # package comprises glib, gobject, and gio
    - !Install [glib2.0-dev]

    # the builds deposit introspection data
    # If omit, get can't find ...gir... when building gegl
    - !Install [libgirepository1.0-dev]

    # babl specific

    # links against lcms2 (lite color mgt system) library, need the dev flavor
    - !Install [liblcms2-dev]

    # gegl specific

    # depends on babl (which we build), and these libraries from packages
    - !Install [libjson-glib-dev]

    # gimp specific
    # Somewhat in reverse order of complain by build

    # interpreters

    # <<<2.10 doesn't use GI
    # Python3 PyGObject.  See earlier, installed Python3
    #- !Install [ python3-gi]
    # lua
    #- !Install [ luajit]
    #- !Install [ lua-lgi ]
    # javascript
    #- !Install [ gjs]

    # plugins, mainly file format plugins?
    # JPEG format
    - !Install [ libjpeg-dev]
    # TIFF format
    - !Install [ libtiff-dev]
    # PDF format
    - !Install [ libpoppler-glib-dev]
    - !Install [ poppler-data]

    # file compressors
    - !Install [ liblzma-dev]
    - !Install [ libbz2-dev]

    # ???
    - !Install [ libxmu-dev]
    - !Install [ libappstream-glib-dev]
    - !Install [ librsvg2-dev]

    # mypaint
    - !Install [ mypaint-brushes]
    - !Install [ libmypaint-dev]

    # accessibility toolkit
    - !Install [ libatk1.0-dev]

    #image metadata
    - !Install [ libgexiv2-dev]

    # graphics toolkit: GTK and GDK
    # <<<2.10 uses gtk2
    - !Install [ libgtk2.0-dev]

    # gtk-encode-symbolic-svg
    # To search installed packages: dpkg -S gtk-encode-symbolic-svg
    # To search Ubuntu in browser "Ubuntu Packages Search"
    # Prior to Ubuntu 20.04:  - !Install [ gtk-3-examples]
    # <<<2.10 uses gtk2
    - !Install [libgtk2.0-bin]

    # optional but suppress warnings
    # <<<2.10 uses gtk2
    - !Install [ libcanberra-gtk-module ]

    # ?
    - !Install [ libgdk-pixbuf2.0-dev]

    # renderers
    - !Install [ libpango1.0-dev]
    - !Install [ libcairo2-dev]

    # Ubuntu requires this else Gimp..Gtk crashes with:  Icon 'image-missing' not present in theme Symbolic
    - !Install [ gnome-icon-theme ]

    # avoid dbus error messages from gimp
    - !Install [ dbus-x11 ]

    # Since 2.99.2, Gimp requires vala compiler
    # gexiv2 requires
    - !Install [ valac ]

    # Needed for meson, clang build
    #- !Install [ libomp-dev ]

    # gimp tests want x11 virtual frame buffer
    - !Install [xvfb]


    # remove DNS file that vagga will recreate after build
    # !!! You must do this last, and not at the beginning of a container build
    - !Sh "rm /etc/resolv.conf"

    environ:
      HOME: /work/.home



  # with babl, gegl source
  # gimp requires latest babl, gegl, so we build instead of install
  # These are relatively stable compared to gimp source
  gimpDepsSource:
    setup:
    - !Container gimpDeps

    # use git to clone the repository
    - !Sh |
       git clone https://gitlab.gnome.org/GNOME/babl.git /home/babl

    - !Sh |
       git clone https://gitlab.gnome.org/GNOME/gegl.git /home/gegl

    # starting about Dec. 2021, require gexiv2 > 12.2
    # which might not be packages, but must be built
    # <<<2.10 does not require building gexiv2


  # With built babl, gegl, gexiv2
  bablGeglDev:
    setup:
    - !Container gimpDepsSource

    # Build (from source) certain prereqs of gimp: babl, gegl

    # We don't set GIMP_PREFIX.  Instead we install to default place.

    # Note babl and gegl build the same

    - !Sh |
        cd /home/babl
        meson _build
        cd _build
        ninja
        ninja install

    - !Sh |
        cd /home/gegl
        meson _build
        cd _build
        ninja
        ninja install

    # remove DNS file that vagga will recreate after build
    - !Sh "rm /etc/resolv.conf"




  # Container ready to build GIMP using automake AM
  # Build directory is not in the container.
  # GIMP is not built or installed in the container
  # Local custom Gimp plugins not in the container.

  gimpAMDev:
    setup:
    - !Container bablGeglDev

    # resolve FAILED: cursors/gimp-tool-cursors.c   Related to vector icons?
    #- !Env  XDG_DATA_DIRS: "/usr/local/share:/usr/share"

    # resolve ../plug-ins/common/file-pdf-load.c:32:10: fatal error: poppler.h: No such file or directory
    #- !Env LD_LIBRARY_PATH: "/usr/local/lib/x86_64-linux-gnu:/usr/lib"

    #- !Env PKG_CONFIG_PATH: "/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/local/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig"


    - !EnsureDir /work/gimpBuild

    # !!! Not fighting with Python2: --disable-python

    # configure out of tree build dir
    - !Sh |
        cd /work/gimpBuild
        ../gimp/autogen.sh --disable-docs --enable-debug --disable-gi-docgen --without-vala --disable-python

    # not make here, instead make in command

    - !Install [ language-pack-de-base ]




commands:

  run: !Command
    description: Build, install, run gimp GUI in gimpAMDev container
    container:  gimpAMDev
    write-mode: transient-hard-link-copy
    run: |
      # Setup env, the container does not do this
      export LD_LIBRARY_PATH=/usr/local/lib/x86_64-linux-gnu:/usr/local/lib
      export HOME=/work/.home
      export GIMP_PREFIX=/usr/local
      export XDG_DATA_DIRS=/usr/local/share:/usr/share
      export GI_TYPELIB_PATH=/usr/local/lib/x86_64-linux-gnu/girepository-1.0:/usr/local/lib/girepository-1.0
      export NO_AT_BRIDGE=1

      echo "lkk cd to build dir"
      cd /work/gimpBuild

      echo "lkk AM gcc compile GIMP"
      make all-am -j8

      echo "lkk install GIMP"
      make install

      locale -a

      export LANG="de_DE.utf8"

      echo "lkk running gimp"
      which gimp
      # <<<2.10 has a different name
      gimp --verbose --stack-trace-mode query
      #valgrind gimp --verbose --stack-trace-mode query

      # !!! At one time this worked, but recently has been crashing with an X Window error






