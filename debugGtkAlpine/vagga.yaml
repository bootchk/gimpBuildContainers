# Build gimp in alpineOS using meson and gcc

# And build gtk instead of using package

# Note that alpine uses musl (instead of glibc) which does not support asan
# but clang 12.0 supports asan

containers:

  # basic OS with dev (compiling)
  baseOS:
    setup:
    - !Alpine v3.17

    # tools for dev (C compiler) Ubuntu [build-essential]
    - !Install [alpine-sdk]
    # satisfied by alpine-sdk:
    #   meson and autotools use pkg-config
    #   meson.build calls git

    # meson build system
    - !Install [meson]
    # satisfied by meson
    #    GIMP build needs setuptools

    # build uses gobject introspection tools
    - !Install [gobject-introspection]

    # meson will use cmake if available?
    - !Install [cmake]

    # Runtime dependency of Gimp
    # without this, can't establish LANG and get Pango errors.
    - !Install [ dbus ]


  # with GIMP required libraries
  generalDeps:
    setup:
    - !Container baseOS

    # add arbitrary repo, i.e. for supplemental packages such as babl
    - !AlpineRepo
      repo: community
      tag: community

    # babl, gegl, GIMP requires

    # glib group of libraries
    # package comprises glib, gobject, and gio
    - !Install [glib-dev]
    # babl requires to generate gir, gegl requires babl.gir
    - !Install [ gobject-introspection-dev ]

    # babl specific dependency

    # links against lcms2 (lite color mgt system) library, need the dev flavor
    - !Install [lcms2-dev]

    # gegl specific
    # gegl build requires
    - !Install [json-glib-dev@community]

    # accessibility
    # satisfied by gtk+3.0
    # - !Install [atk]

    # These are not recent enough to build GIMP nightly
    #- !Install [babl-dev@community]
    #- !Install [gegl-dev@community]




  # with babl, gegl source
  # gimp requires latest babl, gegl, so we build instead of install
  # These are relatively stable compared to gimp source
  gimpDepsSource:
    setup:
    - !Container generalDeps

    # Gimp depends on latest babl and gegl which might not be released by gegl.org
    # i.e. get from gimp.org OR get from gegl.org

    - !Sh |
       git clone https://gitlab.gnome.org/GNOME/babl.git /home/babl
    
    - !Sh |
       git clone https://gitlab.gnome.org/GNOME/gegl.git /home/gegl

    # repo is in /work/gtk, outside the container
    #- !Sh |
    #   git clone --branch gtk-3-24 https://gitlab.gnome.org/GNOME/gtk.git /home/gtk



  # With built babl, gegl
  # Build (from source) certain prereqs of gimp: babl, gegl
  bablGeglDev:
    setup:
    - !Container gimpDepsSource

    # gegl build requires
    - !Install [ libpng-dev ]

    # Ensure that BABL installs .gir to a known place, ow ??
    - !Env  XDG_DATA_DIRS: "/usr/local/share:/usr/share"

    # If package gobject-introspection is not installed, babl will not install its gir

    - !EnsureDir /usr/local/share/gir-1.0/babl

    - !Sh |
        cd /home/babl
        meson _build \
         --buildtype=debug \
         -Db_lto=true \
         -Denable-gir=true
        cd _build
        ninja -v -j 8
        ninja install
    # Check installed artifacts
    # Can't build GIMP without this
    # Destination: - !Sh ls -al /usr/local/share/gir-1.0
    # Source: - !Sh ls -al /home/babl/_build/babl
    - !Sh if [ -d "/usr/local/share/gir-1.0/Babl-0.1.gir" ]; then echo "/usr/local/share/gir-1.0/Babl-1.0.gir installed"; fi;

    # build gegl

    - !Sh |
        cd /home/gegl
        meson _build \
         --buildtype=debug \
         -Dgtk-doc=false
        cd _build
        ninja -j 8
        ninja install

    # remove DNS file that vagga will recreate after build
    - !Sh "rm /etc/resolv.conf"



  # Container with other GIMP dependencies installed.

  # If we built gegl and babl: inherit from bablGeglDev
  # If we installed packaged babl and gegl: inherit from generalDeps
  gimpDeps:
    setup:
    - !Container bablGeglDev

    # Required libraries (in addition to babl, gegl, and their requirements)
    - !Install [ cairo-dev ]
    - !Install [ gdk-pixbuf-dev ]
    # gexiv2 from community
    - !Install [ gexiv2-dev@community ]
    # build instead of package
    # - !Install [ gtk+3.0-dev ]
    # other graphics libraries
    - !Install [ libmypaint-dev@community ]
    - !Install [ mypaint-brushes@community ]
    - !Install [ librsvg-dev@community ]
    # https
    - !Install [ glib-networking@community ]
    - !Install [ appstream-glib-dev@community ]
    # X11
    - !Install [ libxmu-dev ]
    # compressor lzma
    - !Install [ xz-dev ]
    - !Install [ bzip2-dev ]
    # PDF format
    - !Install [ poppler-dev ]
    - !Install [ poppler-data@community ]

    # build tools
    # perl
    - !Install [ perl ]
    # in8n internationalization
    - !Install [ intltool ]


  # Optional
  # With built gtk
  gtkDev:
    setup:
    - !Container gimpDeps

    # gtl build requires

    # !!! the dev library
    - !Install [harfbuzz-dev]
    - !Install [shared-mime-info]
    - !Install [gdk-pixbuf-dev]
    - !Install [libxkbcommon-dev]
    # - !Install [wayland-libs-client]
    #- !Install [wayland-dev]
    #- !Install [wayland-protocols]
    - !Install [libxrandr-dev]
    - !Install [atkmm-dev@community]
    - !Install [libepoxy-dev]
    - !Install [pango-dev]

    # Build gtk
    # Touch an option to make it rebuild
    - !Sh |
        cd /work/gtk
        # omit many options
        meson setup _build -Dwayland_backend=false -Dtests=true -Dintrospection=false -Dexamples=false -Dgtk_doc=false \
          -Dman=false    -Ddemos=false  -Dinstalled_tests=true -Dprofiler=false
        meson compile -C _build
          meson install -C _build



  # Container ready to build GIMP
  gimpMesonDev:
    setup:
    - !Container gtkDev

    - !Install [ bash ]
    # - !Install [ libc6-compat ]

    # dbus-launch
    - !Install [ dbus-x11 ]

    # icons??
    - !Install [ xdg-utils@community ]
    - !Install [ xdg-desktop-portal-gnome@community ]

    # stack trace requires gdb
    - !Install [ gdb ]

    # icon themes: gtk must have one else asserts in ensure_surface
    - !Install [adwaita-icon-theme@community ]
    # - !Install [gnome-brave-icon-theme@community ]

    - !EnsureDir /work/mesonBuild

    # use setup --wipe to insure any changes take effect, but you can't use wipe the first time
    - !Sh |
        cd /work/gimp
        LDFLAGS=--verbose meson setup /work/mesonBuild \
         --buildtype=debug \
         -Djavascript=false \
         -Dlua=false \
         -Dpython=false \
         -Dvala-plugins=disabled \
         -Dg-ir-doc=false

    volumes:
      # No volumes for test plugins

      # Larger /tmp for testing
      # 100Mi is default, not enough to create many image files
      /tmp: !Tmpfs { size: 500Mi, mode: 0o1777 }

    # env that GIMP expects
    environ:
      HOME:            /work/.home
      GIMP_PREFIX:     /usr/local
      GEGL_PATH:       /usr/local/lib/x86_64-linux-gnu/gegl-0.4
      GI_TYPELIB_PATH: /usr/local/lib/x86_64-linux-gnu/girepository-1.0:/usr/local/lib/girepository-1.0
      NO_AT_BRIDGE:    1
      LD_LIBRARY_PATH: /usr/local/lib/x86_64-linux-gnu:/usr/local/lib:${LD_LIBRARY_PATH}
      XDG_DATA_DIRS:   /usr/local/share:/usr/share
      PATH:            /bin:/usr/local/bin:/usr/bin

# !!! Critical to have /bin in PATH since meson.build files call "echo" and "sh" which are in /bin on Alpine

commands:

  # use     vagga --use-env DISPLAY run

  run: !Command
    description: Build and run gimp
    container:  gimpMesonDev
    write-mode: transient-hard-link-copy
    run: |
      echo "HOME"            $HOME
      echo "GIMP_PREFIX"     $GIMP_PREFIX
      echo "LD_LIBRARY_PATH" $LD_LIBRARY_PATH
      echo "XDG_DATA_DIRS"   $XDG_DATA_DIRS
      echo "PATH"            $PATH
      echo "GEGL_PATH"       $GEGL_PATH
      echo "GI_TYPELIB_PATH" $GI_TYPELIB_PATH
      echo "PATH"            $PATH

      echo  "build Gimp"
      cd /work/mesonBuild
      ninja -j 8
      ninja install


      # enable debug messages
      export G_MESSAGES_DEBUG=all
      export GTK_DEBUG=icontheme,iconfallback,actions,geometry

      echo "show resources"
      gresource list /usr/lib64/libgtk-3.so

      echo "run Gimp"
      # /usr/local/bin/gimp-2.99 --verbose --stack-trace-mode query --no-fonts
      # gdb /usr/local/bin/gimp-2.99

